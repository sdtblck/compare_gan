dataset.name = "images_128"
options.datasets = "gs://fontgan_euw4/datasets/fonts_128/fonts_128-0*"
options.random_labels = True
options.num_classes = 1000
train_imagenet_transform.crop_method = "resize_with_pad"
options.z_dim = 120
options.g_flood = 0.05
options.d_flood = 0.2
resnet_biggan.Generator.blocks_with_attention = "64"
resnet_biggan.Discriminator.blocks_with_attention = "64"

resnet_biggan.Generator.ch = 96
resnet_biggan.Discriminator.ch = 96

options.architecture = "resnet_biggan_arch"
ModularGAN.conditional = True
options.batch_size = 2048
options.gan_class = @ModularGAN
options.lamba = 1
options.training_steps = 25000000
weights.initializer = "orthogonal"
spectral_norm.singular_value = "auto"

# Generator
G.batch_norm_fn = @conditional_batch_norm
G.spectral_norm = True
ModularGAN.g_use_ema = True
resnet_biggan.Generator.hierarchical_z = True
resnet_biggan.Generator.embed_y = True
standardize_batch.decay = 0.9
standardize_batch.epsilon = 1e-5
standardize_batch.use_moving_averages = False
standardize_batch.use_cross_replica_mean = True

# Discriminator
options.disc_iters = 2
D.spectral_norm = True
resnet_biggan.Discriminator.project_y = True

# Loss and optimizer
loss.fn = @hinge
penalty.fn = @no_penalty
ModularGAN.g_lr = 0.0000666
ModularGAN.d_lr = 0.0005
ModularGAN.g_lr_mul = 1.0
ModularGAN.d_lr_mul = 1.0
ModularGAN.g_optimizer_fn = @tf.train.AdamOptimizer
ModularGAN.d_optimizer_fn = @tf.train.AdamOptimizer
tf.train.AdamOptimizer.beta1 = 0.0
tf.train.AdamOptimizer.beta2 = 0.999

z.distribution_fn = @tf.random.normal
eval_z.distribution_fn = @tf.random.normal

run_config.iterations_per_loop = 250
run_config.save_checkpoints_steps = 250
run_config.experimental_host_call_every_n_steps = 50

#resnet_biggan.Generator.channel_multipliers = "16, 16, 8, 4, 2, 1"
#resnet_biggan.Discriminator.channel_multipliers = "1, 2, 4, 8, 16, 16"
